.program consumer

; Repeatedly get one word of data from the TX FIFO, stalling when the FIFO is
; empty. Write the least significant bit to the OUT pin group.

loop:
    pull block ; Pull state from TC queue
    mov isr, osr ; Copy state to isr to be pushed to RX queue
    push block ; Send state to FIFO to be read by CPU and displayed
    out pins, 1 ; Forward state to the LED pin
    jmp loop

% c-sdk {
static inline void consumer_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = consumer_program_get_default_config(offset);

    // Clock divider setup (run at 2 kHz)
    pio_sm_set_clkdiv_int_frac(pio, sm, 50000, 0);

    // Map the state machine's OUT pin group to one pin, namely the `pin`
    // parameter to this function.
    sm_config_set_out_pins(&c, pin, 1);
    // Set this pin's GPIO function (connect PIO to the pad)
    pio_gpio_init(pio, pin);
    // Set the pin direction to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
}

static inline void consumer_program_start(PIO pio, uint sm) {
        // Set the state machine running
        pio_sm_set_enabled(pio, sm, true);
}
%}
